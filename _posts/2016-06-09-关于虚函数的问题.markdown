---
layout: post   
title: 关于虚函数的一些思考    
categories: jekyll update      
---



今天是端午节，祝大家端午节快乐!

![phoebe](https://www.google.com/logos/doodles/2016/phoebe-snetsingers-85th-birthday-5179281716019200-hp.gif)


c++的三大基本特性，继承，封装和多态。多态就是通过虚函数体现出来的，虚函数允许子类重新定义基类的成员函数。而子类  
重新定义父类的做法称之为override(覆盖),只有重写了虚函数才能体现出c++的多态特性。

虚函数的写法很简单，就是在函数的声明的最前面加上virtual这个关键字，虚函数是要实现的。
虚函数编译器是通过虚表指针实现的。

它的写法如下，比我们有一个Test的一个类，他有一虚方法Print:

    class Test   
    {     
        public:  
            virtual void Print()     
            {      
                cout<<" Test : Hello World"<<endl;     
            }     
    };      

这个Test占多少个字节呢，答案是4个字节，虽然Test没有成员变量，但是因为有虚函数，这个类含有一个隐藏的虚表指针。^-^   


TestA 这个类，继承于Test类:   

    class TestA : public Test     
    {    
        public:
            void Print()
            {    
                cout<< " TestA : Hello World"<<endl;   
            }      
    }        


如果有如下的代码调用,它的输出是什么:        


    TestA* pTestA = new Test();      
    Test* pTest = pTestA;    
    pTest->Print();        



答案是输出 :     


>> TestA : Hello World        


因为在上述代码调用中发生代码切片操作，即把子类赋值给父类。但是地址还是指向子类，子类中有实现这个虚函数
因此调用的是子类的方法。

要是把父类中的Print方法的virtual属性去掉，依然是如上的代码调用，那应该是调用谁的Print方法。答案是调用父类自己
的方法Print,因为虚表指针，所以无法动态识别。

虚函数在日常会经常使用，一般用来实现子类自己的特殊方法，比如一个副本,Scene是一个基本的场景，然后派生出动态副本
动态副本中有一些特殊的玩法，但是玩家是在scene这个场景中的，因此要在Scene中定义一些虚方法，然后在子类中具体实现相
关的逻辑。

纯虚函数和虚函数的区别就是如果在基类中申明了纯虚函数，则在子类中必须实现。对于父类来讲纯虚函数就是一个声明。

可能有的地方理解还不到位，没有更深入，我打算在看看<<深度探索C++对象模型>>，然后在回来进行补充和修改。





